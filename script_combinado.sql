
CREATE OR REPLACE PACKAGE PKG_PROFESSOR AS
    FUNCTION TOTAL_TURMAS_POR_PROFESSOR RETURN SYS_REFCURSOR;
    FUNCTION TOTAL_TURMAS_PROFESSOR(P_ID_PROFESSOR NUMBER) RETURN NUMBER;
    FUNCTION PROFESSOR_DISCIPLINA(P_ID_DISCIPLINA NUMBER) RETURN VARCHAR2;
END PKG_PROFESSOR;
/
-- Tabela PROFESSORES
CREATE TABLE PROFESSORES (
    ID NUMBER PRIMARY KEY,
    NOME VARCHAR2(100)
);

-- Tabela TURMAS
CREATE TABLE TURMAS (
    ID NUMBER PRIMARY KEY,
    ID_PROFESSOR NUMBER REFERENCES PROFESSORES(ID)
);

-- Tabela DISCIPLINAS
CREATE TABLE DISCIPLINAS (
    ID NUMBER PRIMARY KEY,
    ID_PROFESSOR NUMBER REFERENCES PROFESSORES(ID)
);

-- Inserindo dados fictícios
INSERT INTO PROFESSORES (ID, NOME) VALUES (1, 'Prof. A');
INSERT INTO PROFESSORES (ID, NOME) VALUES (2, 'Prof. B');

INSERT INTO TURMAS (ID, ID_PROFESSOR) VALUES (1, 1);
INSERT INTO TURMAS (ID, ID_PROFESSOR) VALUES (2, 1);
INSERT INTO TURMAS (ID, ID_PROFESSOR) VALUES (3, 2);

INSERT INTO DISCIPLINAS (ID, ID_PROFESSOR) VALUES (1, 1);
INSERT INTO DISCIPLINAS (ID, ID_PROFESSOR) VALUES (2, 2);

COMMIT;
CREATE OR REPLACE PACKAGE BODY PKG_PROFESSOR AS
    FUNCTION TOTAL_TURMAS_POR_PROFESSOR RETURN SYS_REFCURSOR IS
        V_CURSOR SYS_REFCURSOR;
    BEGIN
        OPEN V_CURSOR FOR
            SELECT P.NOME, COUNT(T.ID) AS TOTAL_TURMAS
            FROM PROFESSORES P
            JOIN TURMAS T ON P.ID = T.ID_PROFESSOR
            GROUP BY P.NOME
            HAVING COUNT(T.ID) > 1;
        RETURN V_CURSOR;
    END TOTAL_TURMAS_POR_PROFESSOR;

    FUNCTION TOTAL_TURMAS_PROFESSOR(P_ID_PROFESSOR NUMBER) RETURN NUMBER IS
        V_TOTAL NUMBER;
    BEGIN
        SELECT COUNT(*) INTO V_TOTAL
        FROM TURMAS
        WHERE ID_PROFESSOR = P_ID_PROFESSOR;
        RETURN V_TOTAL;
    END TOTAL_TURMAS_PROFESSOR;

    FUNCTION PROFESSOR_DISCIPLINA(P_ID_DISCIPLINA NUMBER) RETURN VARCHAR2 IS
        V_NOME_PROFESSOR VARCHAR2(100);
    BEGIN
        SELECT P.NOME INTO V_NOME_PROFESSOR
        FROM PROFESSORES P
        JOIN DISCIPLINAS D ON P.ID = D.ID_PROFESSOR
        WHERE D.ID = P_ID_DISCIPLINA;
        RETURN V_NOME_PROFESSOR;
    END PROFESSOR_DISCIPLINA;
END PKG_PROFESSOR;
/
----------------
CREATE OR REPLACE PACKAGE PKG_ALUNO AS
    FUNCTION TOTAL_DISCIPLINAS_POR_ALUNO(P_ID_ALUNO NUMBER) RETURN NUMBER;
    FUNCTION MEDIA_NOTAS_ALUNO(P_ID_ALUNO NUMBER) RETURN NUMBER;
    FUNCTION ALUNOS_TURMA(P_ID_TURMA NUMBER) RETURN SYS_REFCURSOR;
END PKG_ALUNO;
/
-- Tabela ALUNOS
CREATE TABLE ALUNOS (
    ID NUMBER PRIMARY KEY,
    NOME VARCHAR2(100) NOT NULL
);

-- Tabela DISCIPLINAS
CREATE TABLE DISCIPLINAS (
    ID NUMBER PRIMARY KEY,
    NOME VARCHAR2(100) NOT NULL,
    ID_PROFESSOR NUMBER,
    CONSTRAINT FK_DISCIPLINA_PROF FOREIGN KEY (ID_PROFESSOR) REFERENCES PROFESSORES(ID)
);

-- Tabela TURMAS
CREATE TABLE TURMAS (
    ID NUMBER PRIMARY KEY,
    NOME VARCHAR2(100) NOT NULL,
    ID_PROFESSOR NUMBER,
    CONSTRAINT FK_TURMA_PROF FOREIGN KEY (ID_PROFESSOR) REFERENCES PROFESSORES(ID)
);

-- Tabela MATRICULAS
CREATE TABLE MATRICULAS (
    ID NUMBER PRIMARY KEY,
    ID_ALUNO NUMBER NOT NULL,
    ID_DISCIPLINA NUMBER NOT NULL,
    ID_TURMA NUMBER NOT NULL,
    NOTA NUMBER,
    CONSTRAINT FK_MATRICULA_ALUNO FOREIGN KEY (ID_ALUNO) REFERENCES ALUNOS(ID),
    CONSTRAINT FK_MATRICULA_DISC FOREIGN KEY (ID_DISCIPLINA) REFERENCES DISCIPLINAS(ID),
    CONSTRAINT FK_MATRICULA_TURMA FOREIGN KEY (ID_TURMA) REFERENCES TURMAS(ID)
);
-- Inserindo Alunos
INSERT INTO ALUNOS (ID, NOME) VALUES (1, 'Aluno A');
INSERT INTO ALUNOS (ID, NOME) VALUES (2, 'Aluno B');
INSERT INTO ALUNOS (ID, NOME) VALUES (3, 'Aluno C');

-- Inserindo Disciplinas
INSERT INTO DISCIPLINAS (ID, NOME, ID_PROFESSOR) VALUES (1, 'Matemática', 1);
INSERT INTO DISCIPLINAS (ID, NOME, ID_PROFESSOR) VALUES (2, 'História', 2);

-- Inserindo Turmas
INSERT INTO TURMAS (ID, NOME, ID_PROFESSOR) VALUES (1, 'Turma 1', 1);
INSERT INTO TURMAS (ID, NOME, ID_PROFESSOR) VALUES (2, 'Turma 2', 2);

-- Inserindo Matrículas
INSERT INTO MATRICULAS (ID, ID_ALUNO, ID_DISCIPLINA, ID_TURMA, NOTA) VALUES (1, 1, 1, 1, 85);
INSERT INTO MATRICULAS (ID, ID_ALUNO, ID_DISCIPLINA, ID_TURMA, NOTA) VALUES (2, 1, 2, 1, 90);
INSERT INTO MATRICULAS (ID, ID_ALUNO, ID_DISCIPLINA, ID_TURMA, NOTA) VALUES (3, 2, 1, 2, 75);
INSERT INTO MATRICULAS (ID, ID_ALUNO, ID_DISCIPLINA, ID_TURMA, NOTA) VALUES (4, 3, 2, 2, 65);

COMMIT;
-----------------------
CREATE OR REPLACE PACKAGE PKG_DISCIPLINA AS
    FUNCTION PROFESSORES_POR_DISCIPLINA(P_ID_DISCIPLINA NUMBER) RETURN SYS_REFCURSOR;
    FUNCTION TOTAL_ALUNOS_POR_DISCIPLINA(P_ID_DISCIPLINA NUMBER) RETURN NUMBER;
    FUNCTION MEDIA_NOTA_DISCIPLINA(P_ID_DISCIPLINA NUMBER) RETURN NUMBER;
END PKG_DISCIPLINA;
/
CREATE OR REPLACE PACKAGE BODY PKG_DISCIPLINA AS
    FUNCTION PROFESSORES_POR_DISCIPLINA(P_ID_DISCIPLINA NUMBER) RETURN SYS_REFCURSOR IS
        V_CURSOR SYS_REFCURSOR;
    BEGIN
        OPEN V_CURSOR FOR
            SELECT P.NOME
            FROM PROFESSORES P
            JOIN DISCIPLINAS D ON P.ID = D.ID_PROFESSOR
            WHERE D.ID = P_ID_DISCIPLINA;
        RETURN V_CURSOR;
    END PROFESSORES_POR_DISCIPLINA;

    FUNCTION TOTAL_ALUNOS_POR_DISCIPLINA(P_ID_DISCIPLINA NUMBER) RETURN NUMBER IS
        V_TOTAL NUMBER;
    BEGIN
        SELECT COUNT(DISTINCT M.ID_ALUNO) INTO V_TOTAL
        FROM MATRICULAS M
        WHERE M.ID_DISCIPLINA = P_ID_DISCIPLINA;
        RETURN V_TOTAL;
    END TOTAL_ALUNOS_POR_DISCIPLINA;

    FUNCTION MEDIA_NOTA_DISCIPLINA(P_ID_DISCIPLINA NUMBER) RETURN NUMBER IS
        V_MEDIA NUMBER;
    BEGIN
        SELECT AVG(M.NOTA) INTO V_MEDIA
        FROM MATRICULAS M
        WHERE M.ID_DISCIPLINA = P_ID_DISCIPLINA;
        RETURN NVL(V_MEDIA, 0);
    END MEDIA_NOTA_DISCIPLINA;
END PKG_DISCIPLINA;
/



-- Pacote PKG_ALUNO

CREATE OR REPLACE PACKAGE PKG_ALUNO AS
    PROCEDURE EXCLUIR_ALUNO(P_ID_ALUNO NUMBER);
    CURSOR ALUNOS_MAIORES_18 IS
        SELECT NOME, DATA_NASCIMENTO FROM ALUNOS WHERE FLOOR(MONTHS_BETWEEN(SYSDATE, DATA_NASCIMENTO) / 12) > 18;
    CURSOR ALUNOS_POR_CURSO(P_ID_CURSO NUMBER) IS
        SELECT A.NOME 
        FROM ALUNOS A
        JOIN MATRICULAS M ON A.ID = M.ID_ALUNO
        WHERE M.ID_DISCIPLINA = P_ID_CURSO;
END PKG_ALUNO;
/
CREATE OR REPLACE PACKAGE BODY PKG_ALUNO AS
    PROCEDURE EXCLUIR_ALUNO(P_ID_ALUNO NUMBER) IS
    BEGIN
        DELETE FROM MATRICULAS WHERE ID_ALUNO = P_ID_ALUNO;
        DELETE FROM ALUNOS WHERE ID = P_ID_ALUNO;
    END EXCLUIR_ALUNO;
END PKG_ALUNO;
/
-- Pacote PKG_DISCIPLINA

CREATE OR REPLACE PACKAGE PKG_DISCIPLINA AS
    PROCEDURE CADASTRAR_DISCIPLINA(P_NOME VARCHAR2, P_DESC VARCHAR2, P_CARGA_HOR NUMBER);
    CURSOR TOTAL_ALUNOS_DISCIPLINAS IS
        SELECT D.NOME, COUNT(M.ID_ALUNO) AS TOTAL_ALUNOS
        FROM DISCIPLINAS D
        JOIN MATRICULAS M ON D.ID = M.ID_DISCIPLINA
        GROUP BY D.NOME
        HAVING COUNT(M.ID_ALUNO) > 10;
    CURSOR MEDIA_IDADE_DISCIPLINA(P_ID_DISCIPLINA NUMBER) IS
        SELECT AVG(FLOOR(MONTHS_BETWEEN(SYSDATE, A.DATA_NASCIMENTO) / 12)) AS MEDIA_IDADE
        FROM ALUNOS A
        JOIN MATRICULAS M ON A.ID = M.ID_ALUNO
        WHERE M.ID_DISCIPLINA = P_ID_DISCIPLINA;
    PROCEDURE LISTAR_ALUNOS_DISCIPLINA(P_ID_DISCIPLINA NUMBER);
END PKG_DISCIPLINA;
/
CREATE OR REPLACE PACKAGE BODY PKG_DISCIPLINA AS
    PROCEDURE CADASTRAR_DISCIPLINA(P_NOME VARCHAR2, P_DESC VARCHAR2, P_CARGA_HOR NUMBER) IS
    BEGIN
        INSERT INTO DISCIPLINAS (NOME, DESCRICAO, CARGA_HORARIA)
        VALUES (P_NOME, P_DESC, P_CARGA_HOR);
    END CADASTRAR_DISCIPLINA;

    PROCEDURE LISTAR_ALUNOS_DISCIPLINA(P_ID_DISCIPLINA NUMBER) IS
        CURSOR CUR_ALUNOS IS
            SELECT A.NOME
            FROM ALUNOS A
            JOIN MATRICULAS M ON A.ID = M.ID_ALUNO
            WHERE M.ID_DISCIPLINA = P_ID_DISCIPLINA;
        V_ALUNO ALUNOS.NOME%TYPE;
    BEGIN
        OPEN CUR_ALUNOS;
        LOOP
            FETCH CUR_ALUNOS INTO V_ALUNO;
            EXIT WHEN CUR_ALUNOS%NOTFOUND;
            DBMS_OUTPUT.PUT_LINE('ALUNO: ' || V_ALUNO);
        END LOOP;
        CLOSE CUR_ALUNOS;
    END LISTAR_ALUNOS_DISCIPLINA;
END PKG_DISCIPLINA;
/
